// Generated by CoffeeScript 1.8.0
(function() {
  var eye, make_random, mat_add, mat_eq, mat_inv, mat_neg, mat_scale, mat_sub, reshape, shape, transpose;

  eye = function(n, m) {
    var i, j, _i, _results;
    if (m == null) {
      m = false;
    }
    if (!m) {
      m = n;
    }
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          if (i === j) {
            _results1.push(1);
          } else {
            _results1.push(0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.eye = eye;

  mat_add = function(A, B) {
    var i, j, m, n, _i, _results;
    n = Math.min(A.length, B.length);
    m = Math.min(A[0].length, B[0].length);
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(A[i][j] + B[i][j]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  mat_sub = function(A, B) {
    var i, j, m, n, _i, _results;
    n = Math.min(A.length, B.length);
    m = Math.min(A[0].length, B[0].length);
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(A[i][j] - B[i][j]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  mat_neg = function(A) {
    var i, j, m, n, _i, _results;
    n = A.length;
    m = A[0].length;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(-A[i][j]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.mat_add = mat_add;

  exports.mat_sub = mat_sub;

  exports.mat_neg = mat_neg;

  mat_eq = function(A, B) {
    var al, bl, i, j, m_a, m_b, n_a, n_b, _i, _j;
    n_a = A.length;
    m_a = A[0].length;
    n_b = B.length;
    m_b = B[0].length;
    if (n_a !== n_b) {
      return false;
    }
    if (m_a !== m_b) {
      return false;
    }
    for (i = _i = 0; 0 <= n_a ? _i < n_a : _i > n_a; i = 0 <= n_a ? ++_i : --_i) {
      al = A[i];
      bl = B[i];
      for (j = _j = 0; 0 <= m_a ? _j < m_a : _j > m_a; j = 0 <= m_a ? ++_j : --_j) {
        if (al[j] !== bl[j]) {
          return false;
        }
      }
    }
    return true;
  };

  exports.mat_eq = mat_eq;

  exports.mat_equal = mat_eq;

  mat_inv = function(A) {
    var inv2x2, m, n;
    n = A.length;
    m = A[0].length;
    if ((n !== 2) || (m !== 2)) {
      console.warn('inv of mat which isnt 2x2 is not supported');
    }
    inv2x2 = function(A) {
      var a, b, c, d, det;
      a = A[0][0];
      b = A[0][1];
      c = A[1][0];
      d = A[1][1];
      det = a * d - b * c;
      return [[d / det, -b / det], [-c / det, a / det]];
    };
    return inv2x2(A);
  };

  exports.mat_inv = mat_inv;

  mat_scale = function(k, A) {
    var i, j, m, n, _i, _ref, _results;
    process.assert((typeof k) === 'number');
    process.assert(A.length && ((_ref = A[0]) != null ? _ref.length : void 0));
    n = A.length;
    m = A[0].length;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(k * A[i][j]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.mat_scale = mat_scale;

  make_random = function(n, m) {
    var i, j, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(Math.random());
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.make_random = make_random;

  shape = function(A) {
    return [A.length, A[0].length];
  };

  reshape = function(A, n, m) {
    var I, i, idx, j, list, _i, _results;
    list = [].concat.apply([], A);
    I = list.length;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          idx = i * n + j;
          if (idx < I) {
            _results1.push(list[idx]);
          } else {
            _results1.push(0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.shape = shape;

  exports.reshape = reshape;

  transpose = function(A) {
    var i, j, m, n, _i, _results;
    n = A.length;
    m = A[0].length;
    _results = [];
    for (i = _i = 0; 0 <= m ? _i < m : _i > m; i = 0 <= m ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= n ? _j < n : _j > n; j = 0 <= n ? ++_j : --_j) {
          _results1.push(A[j][i]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.transpose = transpose;

}).call(this);
