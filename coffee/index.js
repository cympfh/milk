// Generated by CoffeeScript 1.7.1
(function() {
  var eye, make_random, mat_add, reshape, shape;

  eye = function(n) {
    var i, j, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= n ? _j < n : _j > n; j = 0 <= n ? ++_j : --_j) {
          if (i === j) {
            _results1.push(1);
          } else {
            _results1.push(0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.eye = eye;

  mat_add = function(A, B) {
    var i, j, m, n, _i, _results;
    n = Math.min(A.length, B.length);
    m = Math.min(A[0].length, B[0].length);
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(A[i][j] + B[i][j]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.mat_add = mat_add;

  make_random = function(n, m) {
    var i, j, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(Math.random());
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.make_random = make_random;

  shape = function(A) {
    return [A.length, A[0].length];
  };

  reshape = function(A, n, m) {
    var I, i, idx, j, list, _i, _results;
    list = [].concat.apply([], A);
    I = list.length;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          idx = i * n + j;
          if (idx < I) {
            _results1.push(list[idx]);
          } else {
            _results1.push(0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  exports.shape = shape;

  exports.reshape = reshape;

}).call(this);
